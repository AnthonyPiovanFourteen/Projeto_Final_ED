from collections import deque
import datetime

catalogo_livros = {}
cadastro_usuarios = {}
registros_emprestimos = []
lista_espera = {}

def menu_principal():
    while True:
        print("=" * 47)
        print("üìö SISTEMA DE GERENCIAMENTO DE BIBLIOTECA üìö")
        print("=" * 47)
        print(" 1.  ‚ûï  Adicionar Livro")
        print(" 2.  ‚ûñ  Remover Livro")
        print(" 3.  üîç  Buscar Livro")
        print(" 4.  üìñ  Cat√°logo de Livros")
        print(" 5.  üë§  Adicionar Usu√°rio")
        print(" 6.  üì•  Emprestar Livro")
        print(" 7.  üì§  Devolver Livro")
        print(" 8.  üìö  Livros Emprestados")
        print(" 0.  üö™  Sair")
        print("=" * 47)
        opcao = input("üî∏ Escolha uma op√ß√£o: ")
        print("=" * 47)
        print("\n")

        match opcao:
            case '1':
                adicionar_livro()
            case '2':
                remover_livro()
            case '3':
                buscar_livro()
            case '4':
                exibir_catalogo()
            case '5':
                adicionar_usuario()
            case '6':
                realizar_emprestimo()
            case '7':
                registrar_devolucao()
            case '8':
                listar_emprestimos()
            case '0':
                print("Saindo do sistema. At√© logo!")
                break
            case _:
                print("Op√ß√£o inv√°lida. Tente novamente.")
        if opcao != '0':
            input("\nPressione Enter para continuar...")

def adicionar_livro():
    print("=" * 47)
    print("‚ûïüìö Adicionar Novo Livro")
    print("=" * 47)

    isbn_livro = input("ISBN do livro: ")
    if not isbn_livro.strip():
        print("ISBN n√£o pode ser vazio.")
        return
    if isbn_livro in catalogo_livros:
        print(f"Erro: Livro com ISBN {isbn_livro} j√° existe.")
        return

    titulo_livro = input("T√≠tulo do livro: ")
    if not titulo_livro.strip():
        print("T√≠tulo n√£o pode ser vazio.")
        return

    autor_livro = input("Autor do livro: ")
    if not autor_livro.strip():
        print("Autor n√£o pode ser vazio.")
        return

    genero_livro = input("G√™nero do livro: ")
    if not genero_livro.strip():
        print("G√™nero n√£o pode ser vazio.")
        return

    while True:
        try:
            num_copias = int(input("N√∫mero total de c√≥pias: "))
            if num_copias > 0:
                break
            else:
                print("O n√∫mero de c√≥pias deve ser maior que zero.")
        except ValueError:
            print("Entrada inv√°lida. Por favor, digite um n√∫mero inteiro.")

    catalogo_livros[isbn_livro] = {
        "titulo": titulo_livro,
        "autor": autor_livro,
        "genero": genero_livro,
        "copias_totais": num_copias,
        "copias_disponiveis": num_copias
    }
    print(f"Livro '{titulo_livro}' (ISBN: {isbn_livro}) adicionado com sucesso!")

def remover_livro():
    print("=" * 47)
    print("‚ûñüìö Remover Livro do Cat√°logo")
    print("=" * 47)

    apagar_livro = input("Digite o ISBN do livro a ser removido: ")

    if not apagar_livro.strip():
        print("O ISBN n√£o pode ser vazio.")
        return

    if apagar_livro not in catalogo_livros:
        print(f"Erro: Livro com ISBN '{apagar_livro}' n√£o encontrado.")
        return

    emprestimo_status = False
    for emprestimo in registros_emprestimos:
        if emprestimo.get("isbn_livro") == apagar_livro and emprestimo.get("status") == "ativo":
            emprestimo_status = True
            break

    if emprestimo_status:
        print(f"Erro: O livro '{catalogo_livros[apagar_livro]['titulo']}' (ISBN: {apagar_livro}) est√° atualmente emprestado.")
        print("Ele n√£o pode ser removido at√© que seja devolvido.")
        return

    livro_removido = catalogo_livros.pop(apagar_livro)

    if apagar_livro in lista_espera:
        lista_espera.pop(apagar_livro)
        print(f"Livro tamb√©m removido da fila de espera.")

    print(f"Livro '{livro_removido['titulo']}' (ISBN: {apagar_livro}) removido com sucesso!")

def buscar_livro():
    print("=" * 47)
    print("üîçüìö Buscar Livro no Cat√°logo")
    print("=" * 47)

    while True:
        print("\nComo voc√™ gostaria de buscar o livro?")
        print("  1. Por T√≠tulo")
        print("  2. Por Autor")
        print("  3. Por G√™nero")
        print("  4. Por ISBN")
        print("  0. Voltar ao Menu Principal")
        print("-" * 47)

        criterio_busca = input("Escolha o crit√©rio de busca: ")
        print("-" * 47)

        match criterio_busca:
            case '1':
                termo_pesquisa = input("Digite o t√≠tulo a buscar: ")
                if not termo_pesquisa.strip():
                    print("O campo 'T√≠tulo' n√£o pode ser vazio.")
                else:
                    busca_resultados = False
                    print(f"\n--- Buscando livros por T√çTULO contendo: '{termo_pesquisa}' ---")
                    for isbn, dados_livro in catalogo_livros.items():
                        if termo_pesquisa.lower() in dados_livro.get("titulo", "").lower():
                            if not busca_resultados:
                                print("--- Resultados Encontrados ---")
                                busca_resultados = True
                            print(f"  ISBN: {isbn}")
                            print(f"  T√≠tulo: {dados_livro.get('titulo', 'N/D')}")
                            print(f"  Autor: {dados_livro.get('autor', 'N/D')}")
                            print(f"  G√™nero: {dados_livro.get('genero', 'N/D')}")
                            print(f"  C√≥pias Totais: {dados_livro.get('copias_totais', 'N/D')}")
                            print(f"  C√≥pias Dispon√≠veis: {dados_livro.get('copias_disponiveis', 'N/D')}")
                            print("-" * 30)
                    if not busca_resultados:
                        print(f"Nenhum livro encontrado com o t√≠tulo contendo '{termo_pesquisa}'.")

            case '2':
                termo_pesquisa = input("Digite o autor a buscar: ")
                if not termo_pesquisa.strip():
                    print("O campo 'Autor' n√£o pode ser vazio.")
                else:
                    busca_resultados = False
                    print(f"\n--- Buscando livros por AUTOR contendo: '{termo_pesquisa}' ---")
                    for isbn, dados_livro in catalogo_livros.items():
                        if termo_pesquisa.lower() in dados_livro.get("autor", "").lower():
                            if not busca_resultados:
                                print("--- Resultados Encontrados ---")
                                busca_resultados = True
                            print(f"  ISBN: {isbn}")
                            print(f"  T√≠tulo: {dados_livro.get('titulo', 'N/D')}")
                            print(f"  Autor: {dados_livro.get('autor', 'N/D')}")
                            print(f"  G√™nero: {dados_livro.get('genero', 'N/D')}")
                            print(f"  C√≥pias Totais: {dados_livro.get('copias_totais', 'N/D')}")
                            print(f"  C√≥pias Dispon√≠veis: {dados_livro.get('copias_disponiveis', 'N/D')}")
                            print("-" * 30)
                    if not busca_resultados:
                        print(f"Nenhum livro encontrado do autor contendo '{termo_pesquisa}'.")

            case '3':
                termo_pesquisa = input("Digite o g√™nero a buscar: ")
                if not termo_pesquisa.strip():
                    print("O campo 'G√™nero' n√£o pode ser vazio.")
                else:
                    busca_resultados = False
                    print(f"\n--- Buscando livros por G√äNERO contendo: '{termo_pesquisa}' ---")
                    for isbn, dados_livro in catalogo_livros.items():
                        if termo_pesquisa.lower() in dados_livro.get("genero", "").lower():
                            if not busca_resultados:
                                print("--- Resultados Encontrados ---")
                                busca_resultados = True
                            print(f"  ISBN: {isbn}")
                            print(f"  T√≠tulo: {dados_livro.get('titulo', 'N/D')}")
                            print(f"  Autor: {dados_livro.get('autor', 'N/D')}")
                            print(f"  G√™nero: {dados_livro.get('genero', 'N/D')}")
                            print(f"  C√≥pias Totais: {dados_livro.get('copias_totais', 'N/D')}")
                            print(f"  C√≥pias Dispon√≠veis: {dados_livro.get('copias_disponiveis', 'N/D')}")
                            print("-" * 30)
                    if not busca_resultados:
                        print(f"Nenhum livro encontrado do g√™nero contendo '{termo_pesquisa}'.")

            case '4':
                termo_pesquisa = input("Digite o ISBN a buscar: ")
                if not termo_pesquisa.strip():
                    print("O campo 'ISBN' n√£o pode ser vazio.")
                else:
                    busca_resultados = False
                    print(f"\n--- Buscando livro por ISBN: '{termo_pesquisa}' ---")
                    if termo_pesquisa in catalogo_livros:
                        dados_livro = catalogo_livros[termo_pesquisa]
                        print("--- Resultado Encontrado ---")
                        busca_resultados = True
                        print(f"  ISBN: {termo_pesquisa}")
                        print(f"  T√≠tulo: {dados_livro.get('titulo', 'N/D')}")
                        print(f"  Autor: {dados_livro.get('autor', 'N/D')}")
                        print(f"  G√™nero: {dados_livro.get('genero', 'N/D')}")
                        print(f"  C√≥pias Totais: {dados_livro.get('copias_totais', 'N/D')}")
                        print(f"  C√≥pias Dispon√≠veis: {dados_livro.get('copias_disponiveis', 'N/D')}")
                        print("-" * 30)
                    if not busca_resultados:
                        print(f"Nenhum livro encontrado com o ISBN '{termo_pesquisa}'.")

            case '0':
                print("Retornando ao menu principal...")
                return

            case _:
                print("Op√ß√£o de crit√©rio inv√°lida. Tente novamente.")

        input("\nPressione Enter para continuar...")

def exibir_catalogo():
    print("=" * 47)
    print("üìñ  Cat√°logo de Livros Completo")
    print("=" * 47)
    if not catalogo_livros:
        print("A biblioteca est√° vazia. Nenhum livro para listar.")
        return

    print(f"{'ISBN':<20} | {'T√≠tulo':<30} | {'Autor':<25} | {'G√™nero':<15} | {'Disp/Total':<10}")
    print("-" * 112)

    for isbn, dados_livro in catalogo_livros.items():
        titulo = dados_livro.get('titulo', 'N/D')
        autor = dados_livro.get('autor', 'N/D')
        genero = dados_livro.get('genero', 'N/D')
        copias_disp = dados_livro.get('copias_disponiveis', 0)
        copias_total = dados_livro.get('copias_totais', 0)
        print(f"{isbn:<20} | {titulo:<30} | {autor:<25} | {genero:<15} | {f'{copias_disp}/{copias_total}':<10}")

        if isbn in lista_espera and lista_espera[isbn]:
            print(f"{'':<20} | {'Fila de espera:':<30} {list(lista_espera[isbn])}")
    print("-" * 112)
def adicionar_usuario():
    print("=" * 47)
    print("üë§  Adicionar Novo Usu√°rio")
    print("=" * 47)

    cpf_usuario = input("Digite o CPF do usu√°rio, (ex: 12345678900): ")
    if not cpf_usuario:
        print("CPF do usu√°rio n√£o pode ser vazio.")
        return
    if cpf_usuario in cadastro_usuarios:
        print(f"Erro: Usu√°rio com um CPF que j√° existe: '{cpf_usuario}'")
        return

    nome_usuario = input("Nome do usu√°rio: ")
    if not nome_usuario:
        print("Nome do usu√°rio n√£o pode ser vazio.")
        return
    email_usuario = input("Email do usu√°rio: ")
    if not email_usuario:
        print("Email n√£o pode estar vazio.")
        return

    cadastro_usuarios[cpf_usuario] = {
        "nome": nome_usuario,
        "email": email_usuario
    }
    print(f"Usu√°rio: {nome_usuario}' portador do CPF: {cpf_usuario} e do Email: {email_usuario} adicionado ao cadastro com sucesso!")

def realizar_emprestimo():
    print("=" * 47)
    print("üì•  Realizar Empr√©stimo de Livro")
    print("=" * 47)

    isbn_emprestimo = input("ISBN do livro a ser emprestado: ")
    if not isbn_emprestimo:
        print("ISBN n√£o pode ser vazio.")
        return
    if isbn_emprestimo not in catalogo_livros:
        print(f"Erro: Livro com ISBN '{isbn_emprestimo}' n√£o encontrado.")
        return

    cpf_emprestimo = input("CPF do usu√°rio que est√° pegando o livro: ")
    if not cpf_emprestimo:
        print("CPF do usu√°rio n√£o pode ser vazio.")
        return
    if cpf_emprestimo not in cadastro_usuarios:
        print(f"Erro: Usu√°rio com CPF '{cpf_emprestimo}' n√£o encontrado. Cadastre o usu√°rio primeiro.")
        return

    livro_solicitado = catalogo_livros[isbn_emprestimo]

    if livro_solicitado.get("copias_disponiveis", 0) > 0:
        livro_solicitado["copias_disponiveis"] -= 1

        data_limite_devolucao = datetime.date.today() + datetime.timedelta(10)

        registro_emprestimo = {
            "isbn_livro": isbn_emprestimo,
            "cpf_usuario": cpf_emprestimo,
            "data_emprestimo": datetime.date.today().isoformat(),
            "data_devolucao_prevista": data_limite_devolucao.isoformat(),
            "status": "ativo"
        }
        registros_emprestimos.append(registro_emprestimo)

        print(f"Livro '{livro_solicitado['titulo']}' emprestado para '{cadastro_usuarios[cpf_emprestimo]['nome']}'.")
        print(f"Devolver at√©: {data_limite_devolucao.isoformat()}.")
    else:
        print(f"Livro '{livro_solicitado['titulo']}' n√£o est√° dispon√≠vel (0 c√≥pias dispon√≠veis).")
        resposta_fila = input("Deseja entrar na fila de espera para este livro (s/n)? ")
        if resposta_fila == 's':
            if isbn_emprestimo not in lista_espera:
                lista_espera[isbn_emprestimo] = deque()

            if cpf_emprestimo not in lista_espera[isbn_emprestimo]:
                lista_espera[isbn_emprestimo].append(cpf_emprestimo)
                print(
                    f"Usu√°rio '{cadastro_usuarios[cpf_emprestimo]['nome']}' adicionado √† fila de espera para '{livro_solicitado['titulo']}'.")
            else:
                print(f"Usu√°rio '{cadastro_usuarios[cpf_emprestimo]['nome']}' j√° est√° na fila de espera para este livro.")

def registrar_devolucao():
    print("=" * 47)
    print("üì§  Registrar Devolu√ß√£o de Livro")
    print("=" * 47)

    isbn_devolucao = input("ISBN do livro a ser devolvido: ")
    if not isbn_devolucao:
        print("ISBN do livro n√£o pode ser vazio.")
        return

    cpf_devolucao = input("CPF do usu√°rio que est√° devolvendo: ")
    if not cpf_devolucao:
        print("CPF do usu√°rio n√£o pode ser vazio.")
        return

    busca_emprestimo = None
    i_emprestimo = -1

    for i, registro in enumerate(registros_emprestimos):
        if registro.get("isbn_livro") == isbn_devolucao and registro.get("cpf_usuario") == cpf_devolucao and registro.get("status") == "ativo":
            busca_emprestimo = registro
            i_emprestimo = i
            break

    if busca_emprestimo:
        isbn_devolvido = busca_emprestimo["isbn_livro"]
        cpf_devolvendo = busca_emprestimo["cpf_usuario"]

        if isbn_devolvido in catalogo_livros:
            catalogo_livros[isbn_devolvido]["copias_disponiveis"] += 1
        else:
            print(
                f"Aten√ß√£o: O livro com ISBN {isbn_devolvido} n√£o foi encontrado no cat√°logo (pode ter sido removido).")

        registros_emprestimos[i_emprestimo]["status"] = "devolvido"

        nome_livro = catalogo_livros.get(isbn_devolvido, {}).get('titulo', f"ISBN: {isbn_devolvido}")
        nome_usuario = cadastro_usuarios.get(cpf_devolvendo, {}).get('nome', f"CPF Usu√°rio: {cpf_devolvendo}")

        print(f"Livro '{nome_livro}' devolvido com sucesso por '{nome_usuario}'.")

        if isbn_devolvido in catalogo_livros and isbn_devolvido in lista_espera and lista_espera[isbn_devolvido]:
            cpf_proximo = lista_espera[isbn_devolvido].popleft()
            nome_proximo = cadastro_usuarios.get(cpf_proximo, {}).get('nome', cpf_proximo)
            livro_disponivel = catalogo_livros[isbn_devolvido].get('titulo', isbn_devolvido)

            print(f"Notifica√ß√£o: Livro '{livro_disponivel}' agora dispon√≠vel. "
                  f"Usu√°rio '{nome_proximo}' √© o pr√≥ximo na fila.")

            if not lista_espera[isbn_devolvido]:
                del lista_espera[isbn_devolvido]
    else:
        print(f"Nenhum empr√©stimo ATIVO encontrado para o livro ISBN '{isbn_devolucao}' pelo usu√°rio ID '{cpf_devolucao}'.")


def listar_emprestimos():
    print("=" * 47)
    print("üìö  Livros Emprestados Atualmente (Ativos)")
    print("=" * 47)

    emprestimo_ativo = False

    print(f"{'ISBN Livro':<20} | {'T√≠tulo':<30} | {'Usu√°rio (CPF)':<20} | {'Nome Usu√°rio':<25} | {'Devolu√ß√£o At√©':<15}")
    print("-" * 115)

    for registro_emprestimo in registros_emprestimos:
        if registro_emprestimo.get("status") == "ativo":
            emprestimo_ativo = True

            isbn = registro_emprestimo.get("isbn_livro", "N/D")

            cpf_emprestimo = registro_emprestimo.get("cpf_usuario", "N/D")

            livro_devolucao = catalogo_livros.get(isbn, {}).get("titulo", "T√≠tulo Desconhecido")
            nome_devolucao = cadastro_usuarios.get(cpf_emprestimo, {}).get("nome", "Nome Desconhecido")

            data_devolucao = registro_emprestimo.get("data_devolucao_prevista", "N/D")

            print(
                f"{isbn:<20} | {livro_devolucao:<30} | {cpf_emprestimo:<20} | {nome_devolucao:<25} | {data_devolucao:<15}")

    if not emprestimo_ativo:
        print("Nenhum livro emprestado ativamente no momento.")
    else:
        print("-" * 115)

if __name__ == "__main__":
    menu_principal()